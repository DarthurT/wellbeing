read_api_key <- function(){
readr::read_rds("api_key")
}
api_root <- function(){
"http://datapoint.metoffice.gov.uk/public/data/"
}
check_saved_api_key <- function(){
if(!file.exists("api_key")){
stop("No saved API key found. Before requesting data use save_api_key().")
}
}
observations_get_site <- function(site_id){
check_saved_api_key()
xml_data <- xml2::read_xml(paste0(
api_root(),
"val/wxobs/all/xml/",
site_id,
"?res=hourly",
"&key=",
read_api_key()
))
weather <- tibble::tibble(xml = rvest::xml_nodes(xml_data, "Period")) %>%
dplyr::mutate(date = as.Date(as.character(purrr::map(xml, .f = ~xml2::xml_attrs(.)[2])))) %>%  #pull date
dplyr::mutate(xml_obs = purrr::map(xml, .f = ~rvest::xml_nodes(., "Rep"))) %>% #pull obs as awkward list
dplyr::mutate(clock_mins = purrr::map(xml_obs, .f = ~xml2::xml_text(xml2::xml_contents(.)))) %>% #get obs clock
dplyr::mutate(obs = purrr::map(xml_obs, .f = ~dplyr::bind_rows(purrr::map(xml2::xml_attrs(.), .f = ~tibble::as.tibble(t((.))))))) %>%  #reformat obs as nested tibbles
dplyr::mutate(obs = purrr::map2(obs, clock_mins, .f = ~add_clock(.x, .y))) %>%
dplyr::select(date, obs) %>%
tidyr::unnest() %>%
dplyr::mutate(clock_hour = as.numeric(clock_mins) / 60) %>%
dplyr::select(date, clock_mins, clock_hour, dplyr::everything())
#convert abbreviations to friendly names. NOTE ALL COLUMN NAMES MUST BE IN fact_names()!!
names(weather) <- fact_names()[names(weather)]
#set numeric column types
suppressWarnings({
weather <- weather %>%
dplyr::mutate_at(dplyr::vars(dplyr::one_of(numeric_fact_names())), as.numeric)
})
weather
}
observations_list_sites <- function() {
check_saved_api_key()
xml_data <- xml2::read_xml(paste0(
api_root(),
"val/wxobs/all/datatype/sitelist?res=daily",
"&key=",
read_api_key()
))
sites <- tibble::tibble(xml = rvest::xml_nodes(xml_data, "Location")) %>%
dplyr::mutate(locations = purrr::map(xml, .f = ~tibble::as.tibble(t(xml2::xml_attrs(.))))) %>%
dplyr::select(locations) %>%
tidyr::unnest() %>%
dplyr::mutate_at(dplyr::vars(c("elevation", "latitude", "longitude")), as.numeric)
sites
}
add_clock <- function(obs, clock_mins){
obs$clock_mins <- clock_mins
obs
}
fact_names <- function() {
c(
date = "date",
clock_mins = "clock_mins",
clock_hour = "clock_hour",
D = "wind_direction",
G = "wind_gust_mph",
H = "humidity_pct",
P = "pressure_hpa",
Pt = "pressure_tendency",
Dp = "dew_pont_c",
S = "wind_speed_mph",
T = "temp_c",
V = "visibility",
F = "feels_like_temp_c",
Pp = "precipitation_prob",
U = "max_uv_index",
W = "weather_type"
)
}
numeric_fact_names <- function() {
c(
clock_mins = "clock_mins",
G = "wind_gust_mph",
H = "humidity_pct",
P = "pressure_hpa",
Dp = "dew_pont_c",
S = "wind_speed_mph",
T = "temp_c",
F = "feels_like_temp_c",
Pp = "precipitation_prob",
U = "max_uv_index",
W = "weather_type"
)
}
save_api_key("09468a57-b0c6-49a5-892a-8d1979513c10")
sites <- observations_list_sites()
observationStore <- data.frame()
for (jj in 1:nrow(sites)) {
siteID <- sites$id[jj]
try({
weather_obs <- observations_get_site(siteID)
weather_obsClean <- weather_obs %>% select(date,clock_hour,wind_direction,wind_speed_mph,pressure_hpa)
weather_obsClean$id <- siteID
weather_obs_store <- merge(weather_obsClean,sites)
if (ncol(weather_obs_store) == 21) {
weather_obs_store$wind_gust_mph <- 'NA'
}
observationStore <- rbind(observationStore, weather_obs_store)
})
}
# convert time
time <- paste(observationStore$date,observationStore$clock_hour," ")
observationStore$Time.formatted <- ymd_h(time)
#convert wind
directionValues <- seq(0,360, 22.5)
directionNames <- c('N','NNE','NE','ENE','E','ESE','SE','SSE','S','SSW','SW','WSW','W','WNW','NW','NNW')
windDirection <- as.data.frame(directionValues,directionNames)
dir <- setNames( seq(0, 337.5 , by=22.5),
c('N','NNE','NE','ENE','E','ESE','SE','SSE','S','SSW','SW','WSW','W','WNW','NW','NNW'))
observationStore$wind_direction_deg <- dir[as.character(observationStore$wind_direction)]
world_map <- map_data("world",'uk')
library(hrbrthemes)
library(gcookbook)
library(tidyverse)
library("viridis")
pp <- ggplot() +
geom_polygon(data = world_map, aes(x = long, y = lat, group = group),fill="lightgray", colour = "white") +
geom_spoke(data = observationStore,
aes(x = longitude,
y = latitude,
angle = wind_direction_deg,
group = id,
colour = pressure_hpa,
radius = scales::rescale(wind_speed_mph, c(.2, .8))), arrow = arrow(length = unit(.05, 'inches'))) +
scale_fill_distiller(palette = "RdYlGn") +
#coord_equal(expand = 0) +
scale_color_viridis() +
coord_map() +
theme_void() +
# theme_ft_rc()+
transition_time(Time.formatted) +
labs(title = "Time: {frame_time}")
animate(pp, height = 500, width =550,res=100,end_pause = 30)
baseData <- data.frame(
"ID" = c(1,1,1,1,2,2,2)
"Change" = c(0,0,1,0,0,1,0)
"Value" = c(0,0,-1,0,0,1,0)
)
baseData <- data.frame(
"ID" = c(1,1,1,1,2,2,2),
"Change" = c(0,0,1,0,0,1,0),
"Value" = c(0,0,-1,0,0,1,0)
)
View(baseData)
test <- baseData %>% group_by(ID) %>% mutate(GroupValue = Value[Change == 1])
library(tidyverse)
baseData <- data.frame(
"ID" = c(1,1,1,1,2,2,2),
"Change" = c(0,0,1,0,0,1,0),
"Value" = c(0,0,-1,0,0,1,0)
)
test <- baseData %>% group_by(ID) %>% mutate(GroupValue = Value[Change == 1])
View(test)
library(data.table)
library(funModeling)
library(plyr)
library(dplyr)
library(ggplot2)
library(reshape2)
library(imputeTS)
library(tsoutliers)
library(lubridate)
library(zoo)
library(xts)
library(forecast)
library(timeSeries)
library(stringi)
library(tidyverse)
library(tibbletime)
library(anomalize)
library(tcltk)
library(readxl)
library(scales)
library(grid)
#----------------------
#Data location
#----------------------
path <- "C:/Users/daniel.thompson/OneDrive - Swansea University/02_Sandbox/01_wellbeing/01_Data/"
setwd(path) #set directory to declared path
ons.data.filename.anxiety <- "wellbeing_ons_anxiety.csv"
ons.data.filename.happy <- "wellbeing_ons_happy.csv"
ons.data.filename.satisfaction <- "wellbeing_ons_satisfaction.csv"
ons.data.filename.worthwhile <- "wellbeing_ons_worthwhile.csv"
ref.data.filename <- "EU-referendum-result-data.csv"
#----------------------
#Import data
#----------------------
data.ons.anxiety  <- read.csv(ons.data.filename.anxiety,
header = TRUE,
skip = 0,
na.strings ="NA",
stringsAsFactors = FALSE)
data.ons.happy  <- read.csv(ons.data.filename.happy,
header = TRUE,
skip = 0,
na.strings ="NA",
stringsAsFactors = FALSE)
data.ons.satisfaction  <- read.csv(ons.data.filename.satisfaction,
header = TRUE,
skip = 0,
na.strings ="NA",
stringsAsFactors = FALSE)
data.ons.worthwhile  <- read.csv(ons.data.filename.worthwhile,
header = TRUE,
skip = 0,
na.strings ="NA",
stringsAsFactors = FALSE)
data.ref  <- read.csv(ref.data.filename,
header = TRUE,
skip = 0,
na.strings ="NA",
stringsAsFactors = FALSE)
#----------------------
#Sort data
#----------------------
data.ons.anxiety$type <- "Anxiety Score"
data.ons.happy$type <- "Happines Score"
data.ons.satisfaction$type <- "Satisfaction Score"
data.ons.worthwhile$type <- "Worthwhile Score"
data.ons.all <- rbind(data.ons.anxiety,data.ons.happy,data.ons.satisfaction,data.ons.worthwhile)
data.ons.all$Area <- data.ons.all$Area.Names
merged.data <- merge(data.ref,data.ons.all, by = 'Area')
test <- gather(merged.data,key = "Year",value = "Value",23:32)
test$Brexit.result <- ifelse(test$Pct_Remain > 50 , "Remain", "Leave")
test$Value <- as.numeric(test$Value)
test$brexit.diff <- test$Pct_Remain - test$Pct_Leave
test$brexit.count.diff <- ((test$Remain - test$Leave)/test$Electorate) * 100
test <- test %>%
mutate(Year.clean = case_when(Year == "X2011.12" ~ 2012,
Year == "X2012.13" ~ 2013,
Year == "X2013.14" ~ 2014,
Year == "X2014.15" ~ 2015,
Year == "X2015.16" ~ 2016,
Year == "X2016.17" ~ 2017,
Year == "X2017.18" ~ 2018,
Year == "X2018.19" ~ 2019))
#Group differences
test <- test %>% mutate(DiffGroup = case_when(brexit.diff > -2.5 & brexit.count.diff < 2.5 ~ 'small margin',
brexit.diff < -2.5 ~ 'large margin',
brexit.diff > 2.5 ~ 'large margin'))
test2 <- test %>% group_by(type,Year,Brexit.result,DiffGroup) %>% summarise(Mean = mean(Value,na.rm=TRUE),
Min = min(Value,na.rm=TRUE),
Max = max(Value,na.rm=TRUE),
sd = sd(Value,na.rm=TRUE)
)
test2 <- test2 %>%
mutate(Year.clean = case_when(Year == "X2011.12" ~ 2012,
Year == "X2012.13" ~ 2013,
Year == "X2013.14" ~ 2014,
Year == "X2014.15" ~ 2015,
Year == "X2015.16" ~ 2016,
Year == "X2016.17" ~ 2017,
Year == "X2017.18" ~ 2018,
Year == "X2018.19" ~ 2019))
library(hrbrthemes)
library(gcookbook)
library(tidyverse)
library("viridis")
# plotting with margin of vote
ggplot(data = test2, aes(x=Year.clean, y=Mean, colour = interaction(Brexit.result,DiffGroup), group = interaction(Brexit.result,DiffGroup))) +
geom_point() +
# geom_line() +
geom_vline(xintercept = 2016,alpha = 0.75, linetype = "longdash", colour = 'red') +
geom_smooth(method = lm, se = FALSE) +
labs(colour = "Area Brexit Result",
title = "Personal Well-being Estimates in Leave/Remain Areas",
subtitle = "ONS well-being data linked to referendum results",
caption="Data from @ONS") +
# geom_text(aes(x=20160),label="Referendum", colour="blue", angle=90, text=element_text(size=11)) +
ylab("Mean Score of the grouped areas (out of 10)") +
xlab("") +
theme_ft_rc() +
theme(plot.title = element_text(size=12)) +
theme(plot.subtitle = element_text(size=9)) +
theme(axis.title.y = element_text(vjust=5)) +
theme(axis.title.y = element_text(hjust=0.5)) +
# theme_modern_rc()+
facet_wrap(~type, scales = "free_y")
ggplot(data = test,aes(x = Year.clean, y=Value,  colour = interaction(Brexit.result,DiffGroup), group = interaction(Brexit.result,DiffGroup))) +
# geom_jitter(alpha = 0.1) +
theme_ft_rc() +
geom_smooth(method = loess, se = FALSE) +
# scale_colour_gradient2() +
geom_vline(xintercept = 2016,alpha = 0.75, linetype = "longdash", colour = 'red') +
facet_wrap(~type, scales = "free_y")
ggplot(data = test,aes(x = Year.clean, y=Value,  colour = interaction(Brexit.result,DiffGroup), group = interaction(Brexit.result,DiffGroup))) +
geom_jitter(alpha = 0.1) +
theme_ft_rc() +
geom_smooth(method = loess, se = FALSE) +
# scale_colour_gradient2() +
geom_vline(xintercept = 2016,alpha = 0.75, linetype = "longdash", colour = 'red') +
facet_wrap(~type, scales = "free_y")
#Group differences
test <- test %>% mutate(DiffGroup = case_when(brexit.diff > -5 & brexit.count.diff < 5 ~ 'small margin',
brexit.diff < -5 ~ 'large margin',
brexit.diff > 5 ~ 'large margin'))
test2 <- test %>% group_by(type,Year,Brexit.result,DiffGroup) %>% summarise(Mean = mean(Value,na.rm=TRUE),
Min = min(Value,na.rm=TRUE),
Max = max(Value,na.rm=TRUE),
sd = sd(Value,na.rm=TRUE)
)
test2 <- test2 %>%
mutate(Year.clean = case_when(Year == "X2011.12" ~ 2012,
Year == "X2012.13" ~ 2013,
Year == "X2013.14" ~ 2014,
Year == "X2014.15" ~ 2015,
Year == "X2015.16" ~ 2016,
Year == "X2016.17" ~ 2017,
Year == "X2017.18" ~ 2018,
Year == "X2018.19" ~ 2019))
ggplot(data = test,aes(x = Year.clean, y=Value,  colour = interaction(Brexit.result,DiffGroup), group = interaction(Brexit.result,DiffGroup))) +
geom_jitter(alpha = 0.1) +
theme_ft_rc() +
geom_smooth(method = loess, se = FALSE) +
# scale_colour_gradient2() +
geom_vline(xintercept = 2016,alpha = 0.75, linetype = "longdash", colour = 'red') +
facet_wrap(~type, scales = "free_y")
ggplot(data = test,aes(x = Year.clean, y=Value,  colour = interaction(Brexit.result,DiffGroup), group = interaction(Brexit.result,DiffGroup))) +
#geom_jitter(alpha = 0.1) +
theme_ft_rc() +
geom_smooth(method = loess, se = FALSE) +
# scale_colour_gradient2() +
geom_vline(xintercept = 2016,alpha = 0.75, linetype = "longdash", colour = 'red') +
facet_wrap(~type, scales = "free_y")
shiny::runApp('C:/Users/daniel.thompson/OneDrive - Swansea University/02_Sandbox/01_wellbeing/03_app/BrexitWell-being')
runApp('C:/Users/daniel.thompson/OneDrive - Swansea University/02_Sandbox/01_wellbeing/03_app/BrexitWell-being')
runApp('C:/Users/daniel.thompson/OneDrive - Swansea University/02_Sandbox/01_wellbeing/03_app/BrexitWell-being')
View(data)
View(data)
runApp('C:/Users/daniel.thompson/OneDrive - Swansea University/02_Sandbox/01_wellbeing/03_app/BrexitWell-being')
runApp('C:/Users/daniel.thompson/OneDrive - Swansea University/02_Sandbox/01_wellbeing/03_app/BrexitWell-being')
test <- test %>% mutate(DiffGroup = case_when(brexit.diff > -2 & brexit.count.diff < 2 ~ 'small margin',
brexit.diff < -2 ~ 'large margin',
brexit.diff > 2 ~ 'large margin'))
View(test)
#Group differences
test <- test %>% mutate(DiffGroup = case_when(brexit.diff > -1 & brexit.count.diff < 1 ~ 'small margin',
brexit.diff < -1 ~ 'large margin',
brexit.diff > 1 ~ 'large margin'))
<- 0 - (2/2)
0 - (2/2)
0 + (2/2)
0 - (1/2)
0 + (1/2)
0 + (15/2)
0 - (15/2)
runApp('C:/Users/daniel.thompson/OneDrive - Swansea University/02_Sandbox/01_wellbeing/03_app/BrexitWell-being')
View(data)
runApp('C:/Users/daniel.thompson/OneDrive - Swansea University/02_Sandbox/01_wellbeing/03_app/BrexitWell-being')
runApp('C:/Users/daniel.thompson/OneDrive - Swansea University/02_Sandbox/01_wellbeing/03_app/BrexitWell-being')
runApp('C:/Users/daniel.thompson/OneDrive - Swansea University/02_Sandbox/01_wellbeing/03_app/BrexitWell-being')
runApp('C:/Users/daniel.thompson/OneDrive - Swansea University/02_Sandbox/01_wellbeing/03_app/BrexitWell-being')
browser()
runApp('C:/Users/daniel.thompson/OneDrive - Swansea University/02_Sandbox/01_wellbeing/03_app/BrexitWell-being')
runApp('C:/Users/daniel.thompson/OneDrive - Swansea University/02_Sandbox/01_wellbeing/03_app/BrexitWell-being')
runApp('C:/Users/daniel.thompson/OneDrive - Swansea University/02_Sandbox/01_wellbeing/03_app/BrexitWell-being')
runApp('C:/Users/daniel.thompson/OneDrive - Swansea University/02_Sandbox/01_wellbeing/03_app/BrexitWell-being')
runApp('C:/Users/daniel.thompson/OneDrive - Swansea University/02_Sandbox/01_wellbeing/03_app/BrexitWell-being')
runApp('C:/Users/daniel.thompson/OneDrive - Swansea University/02_Sandbox/01_wellbeing/03_app/BrexitWell-being')
runApp('C:/Users/daniel.thompson/OneDrive - Swansea University/02_Sandbox/01_wellbeing/03_app/BrexitWell-being')
runApp('C:/Users/daniel.thompson/OneDrive - Swansea University/02_Sandbox/01_wellbeing/03_app/BrexitWell-being')
runApp('C:/Users/daniel.thompson/OneDrive - Swansea University/02_Sandbox/01_wellbeing/03_app/BrexitWell-being')
runApp('C:/Users/daniel.thompson/OneDrive - Swansea University/02_Sandbox/01_wellbeing/03_app/BrexitWell-being')
runApp('C:/Users/daniel.thompson/OneDrive - Swansea University/02_Sandbox/01_wellbeing/03_app/BrexitWell-being')
runApp('C:/Users/daniel.thompson/OneDrive - Swansea University/02_Sandbox/01_wellbeing/03_app/BrexitWell-being')
runApp('C:/Users/daniel.thompson/OneDrive - Swansea University/02_Sandbox/01_wellbeing/03_app/BrexitWell-being')
runApp('C:/Users/daniel.thompson/OneDrive - Swansea University/02_Sandbox/01_wellbeing/03_app/BrexitWell-being')
runApp('C:/Users/daniel.thompson/OneDrive - Swansea University/02_Sandbox/01_wellbeing/03_app/BrexitWell-being')
runApp('C:/Users/daniel.thompson/OneDrive - Swansea University/02_Sandbox/01_wellbeing/03_app/BrexitWell-being')
runApp('C:/Users/daniel.thompson/OneDrive - Swansea University/02_Sandbox/01_wellbeing/03_app/BrexitWell-being')
runApp('C:/Users/daniel.thompson/OneDrive - Swansea University/02_Sandbox/01_wellbeing/03_app/BrexitWell-being')
freq(test$Region)
#----------------------
#Load libraries
#----------------------
library(data.table)
library(funModeling)
library(plyr)
library(dplyr)
library(ggplot2)
library(reshape2)
library(imputeTS)
library(tsoutliers)
library(lubridate)
library(zoo)
library(xts)
library(forecast)
library(timeSeries)
library(stringi)
library(tidyverse)
library(tibbletime)
library(anomalize)
library(tcltk)
library(readxl)
library(scales)
library(grid)
#----------------------
#Data location
#----------------------
path <- "C:/Users/daniel.thompson/OneDrive - Swansea University/02_Sandbox/01_wellbeing/01_Data/"
setwd(path) #set directory to declared path
ons.data.filename.anxiety <- "wellbeing_ons_anxiety.csv"
ons.data.filename.happy <- "wellbeing_ons_happy.csv"
ons.data.filename.satisfaction <- "wellbeing_ons_satisfaction.csv"
ons.data.filename.worthwhile <- "wellbeing_ons_worthwhile.csv"
ref.data.filename <- "EU-referendum-result-data.csv"
#----------------------
#Import data
#----------------------
data.ons.anxiety  <- read.csv(ons.data.filename.anxiety,
header = TRUE,
skip = 0,
na.strings ="NA",
stringsAsFactors = FALSE)
data.ons.happy  <- read.csv(ons.data.filename.happy,
header = TRUE,
skip = 0,
na.strings ="NA",
stringsAsFactors = FALSE)
data.ons.satisfaction  <- read.csv(ons.data.filename.satisfaction,
header = TRUE,
skip = 0,
na.strings ="NA",
stringsAsFactors = FALSE)
data.ons.worthwhile  <- read.csv(ons.data.filename.worthwhile,
header = TRUE,
skip = 0,
na.strings ="NA",
stringsAsFactors = FALSE)
data.ref  <- read.csv(ref.data.filename,
header = TRUE,
skip = 0,
na.strings ="NA",
stringsAsFactors = FALSE)
#----------------------
#Sort data
#----------------------
data.ons.anxiety$type <- "Anxiety Score"
data.ons.happy$type <- "Happines Score"
data.ons.satisfaction$type <- "Satisfaction Score"
data.ons.worthwhile$type <- "Worthwhile Score"
data.ons.all <- rbind(data.ons.anxiety,data.ons.happy,data.ons.satisfaction,data.ons.worthwhile)
data.ons.all$Area <- data.ons.all$Area.Names
merged.data <- merge(data.ref,data.ons.all, by = 'Area')
test <- gather(merged.data,key = "Year",value = "Value",23:32)
test$Brexit.result <- ifelse(test$Pct_Remain > 50 , "Remain", "Leave")
test$Value <- as.numeric(test$Value)
test$brexit.diff <- test$Pct_Remain - test$Pct_Leave
test$brexit.count.diff <- ((test$Remain - test$Leave)/test$Electorate) * 100
test <- test %>%
mutate(Year.clean = case_when(Year == "X2011.12" ~ 2012,
Year == "X2012.13" ~ 2013,
Year == "X2013.14" ~ 2014,
Year == "X2014.15" ~ 2015,
Year == "X2015.16" ~ 2016,
Year == "X2016.17" ~ 2017,
Year == "X2017.18" ~ 2018,
Year == "X2018.19" ~ 2019))
#Group differences
test <- test %>% mutate(DiffGroup = case_when(brexit.diff > -1 & brexit.count.diff < 1 ~ 'small margin',
brexit.diff < -1 ~ 'large margin',
brexit.diff > 1 ~ 'large margin'))
min.diff <- 0 - (15/2)
max.diff <- 0 + (15/2)
test2 <- test %>% group_by(type,Year,Brexit.result,DiffGroup) %>% summarise(Mean = mean(Value,na.rm=TRUE),
Min = min(Value,na.rm=TRUE),
Max = max(Value,na.rm=TRUE),
sd = sd(Value,na.rm=TRUE)
)
test2 <- test2 %>%
mutate(Year.clean = case_when(Year == "X2011.12" ~ 2012,
Year == "X2012.13" ~ 2013,
Year == "X2013.14" ~ 2014,
Year == "X2014.15" ~ 2015,
Year == "X2015.16" ~ 2016,
Year == "X2016.17" ~ 2017,
Year == "X2017.18" ~ 2018,
Year == "X2018.19" ~ 2019))
View(test)
freq(test$Region)
hold <- freq(test$Region)
Order(hold$var)
order(hold$var)
runApp('C:/Users/daniel.thompson/OneDrive - Swansea University/02_Sandbox/01_wellbeing/03_app/BrexitWell-being')
runApp('C:/Users/daniel.thompson/OneDrive - Swansea University/02_Sandbox/01_wellbeing/03_app/BrexitWell-being')
runApp('C:/Users/daniel.thompson/OneDrive - Swansea University/02_Sandbox/01_wellbeing/03_app/BrexitWell-being')
runApp('C:/Users/daniel.thompson/OneDrive - Swansea University/02_Sandbox/01_wellbeing/03_app/BrexitWell-being')
runApp('C:/Users/daniel.thompson/OneDrive - Swansea University/02_Sandbox/01_wellbeing/03_app/BrexitWell-being')
runApp('C:/Users/daniel.thompson/OneDrive - Swansea University/02_Sandbox/01_wellbeing/03_app/BrexitWell-being')
View(data.ons.worthwhile)
View(data.ons.worthwhile)
View(data.ons.worthwhile)
View(test)
View(data.ref)
freq(data.ref$Region)
freq(data.ons.all$Region)
View(data.ons.all)
View(data.ref)
freq(data.ref$Region)
freq(data.ons.all$Region)
View(data.ons.all)
View(data.ons.satisfaction)
